 
 
 
 public class LacCellBvci : CommonToolx, IDisposable
    {
        public object _id;

        private string mongo_collection = CommonAttribute.LacCellBvci[0];
        private string mongo_db = CommonAttribute.LacCellBvci[1];
        private string mongo_conn = CommonAttribute.LacCellBvci[2];

        public  MongoCrud<LacCellBvci> mongo_lac_cell_bvci;

        public LacCellBvci()
        {
            mongo_lac_cell_bvci = new MongoCrud<LacCellBvci>(mongo_conn, mongo_db, mongo_collection);
        }
        #region Implementing IDisposable and the Dispose Pattern Properly
        private bool disposed = false; // to detect redundant calls
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        ~LacCellBvci()
        {
            Dispose(false);
        }
        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing){}
                disposed = true;
            }
        }
        #endregion
        public void CreatCollection()
        {

        }
    }