
                    //包数量和重传的计算
                    //tcps.packet_count = pd_no_3tcp.Count();
                    //tcps.packet_count_repeat = pd_no_3tcp.Count() - pd_no_3tcp.Select(e => e.tcp_nxtseq).Distinct().Count();

                    //????
                    //序列号和ip包的计算误差
                    //tcps.seq_ip2 = tcps.seq_total + (decimal?)tcps.packet_count * (decimal)tcps.headersize - tcps.ip2_total;
                    //tcps.seq_ip2 = (int)((tcps.seq_total - tcps.ip2_total) / tcps.packet_count);

                    //速率的计算
                    //if (tcps.duration != 0)
                    //{
                    //    tcps.ip2_rate = 1.0 * (double)tcps.ip2_total / tcps.duration;
                    //    //tcps.seq_rate = 1.0 * (double)tcps.seq_total / tcps.duration;
                    //    tcps.ip_rate = 1.0 * (double)tcps.ip_total / tcps.duration;
                    //}

                    //丢包的九三

                    /*
                     * 未出现tcp重传? sndcp_set ?  tcp_segment? 
                     * 但是 seq+包头!=ip？的问题？  这种情况可是tcp丢包？
                     * */

                    //int sndcp = pd_no_3tcp.Where(e => e.sndcp_m == "Set").Count();
                    //int tcp = pd_no_3tcp.Where(e => e.tcp_need_segment == "Set").Count();

                    //if (tcps.packet_count_repeat == 0 && (tcps.seq_ip2 + tcps.headersize) != 0)
                    //{
                    //    if (sndcp + tcp == 0)
                    //        tcps.packet_discard_total = 1;
                    //    else
                    //    {
                    //        if (sndcp != 0)
                    //            tcps.packet_discard_total = 9;
                    //        if (tcp != 0)
                    //            tcps.packet_discard_total = 11;
                    //    }
                    //}

                    //tcps.packet_sack_total = pd_no_3tcp.Where(e => e.tcp_options_sack_se_num > 0).Count();

                    //tcps.llc_max = packet_down.Max(e => e.llcgprs_nu);
                    //tcps.llc_min = packet_down.Min(e => e.llcgprs_nu);
                    //tcps.llc_cnt = packet_down.Count();

                    ////llc重传算法设计，通过511这个特殊的帧号处理会话？？？？
                    //if (tcps.llc_max == 511)
                    //{
                    //    int pn = packet_down.Where(e => e.llcgprs_nu == 511).Select(e => e.PacketNum).First();
                    //    tcps.llc_max = packet_down.Where(e => e.PacketNum > pn).Max(e => e.llcgprs_nu + 511);
                    //    tcps.llc_min = packet_down.Where(e => e.PacketNum <= pn).Min(e => e.llcgprs_nu);
                    //}


					
                //List<TlliTcpSession> sessions = new List<TlliTcpSession>();

				        //public int? ci;
				                //progressBar1.Value = i;
                //textBox1.Text = i.ToString();
                //Application.DoEvents();

				        //public double? down_rate;
            //progressBar1.Maximum = step;
			        //public decimal? headersize;
			        //public string ip_aggre;//ip聚合
        //public string ip2_aggre;//ip2聚合
        //public string llc_aggre;//llc聚合
			        //public double ip_rate;
        //public int? ip_total;
        //public int? ip2_min_len;	//ack的包头
        //public double ip2_rate;
        //public int? ip2_total;
        //public int? lac;
        //public int llc_cnt;
        //public int? llc_max;
        //public int? llc_min;
        //public int packet_count;
        //public int packet_count_repeat;
        //public int? packet_discard_total;
        //public int packet_sack_total;
        //public int? seq_ip2;
        //public decimal? seq_max;
        //public decimal? seq_min;


		        //public double? seq_aggre_rate;
        //public decimal? seq_totals;

		    //public double seq_rate;


			                    //TlliTcpSession tcps = new TlliTcpSession();


								
                    //下行包，非3次握手
                    //tcps.ip2_total = pd_no_3tcp.Sum(e => e.ip2_len);

                    //tcps.ip_total = pd_no_3tcp.Sum(e => e.ip_len);

                    //提取ack的包头
                    //tcps.ip2_min_len = packet_down.Min(e => e.ip2_len);

                    //包头的计算
                    //取最小值
                    //.FirstOrDefault();
                    //decimal? header = pd_no_3tcp.Min(e => e.ip2_len - (Convert.ToInt64(e.tcp_nxtseq) - Convert.ToInt64(e.tcp_seq)));

                    //tcps.headersize = (header == null ? (tcps.ip2_min_len == 0 ? header : tcps.ip2_min_len) : header);

                    //ip2的问题可能导致计算错误，纠错，ack的包头
                    //if (tcps.headersize > tcps.ip2_min_len)
                    //    tcps.headersize = tcps.ip2_min_len;


					

                    //tcps.lac = m.Where(e => e.bssgp_lac != null).Select(e => e.bssgp_lac).FirstOrDefault();
                    //tcps.ci = m.Where(e => e.bssgp_ci != null).Select(e => e.bssgp_ci).FirstOrDefault();

                    #region 关键信息聚合，信令回放
                    //tcps.ip_aggre = pd_no_3tcp.Select(e => e.ip_len.Value.ToString()).Aggregate((a, b) => a + "," + b);
                    //tcps.ip2_aggre = pd_no_3tcp.Select(e => e.ip2_len.Value.ToString()).Aggregate((a, b) => a + "," + b);
                    //tcps.llc_aggre = pd_no_3tcp.Select(e => e.llcgprs_nu.Value.ToString()).Aggregate((a, b) => a + "," + b);
                    #endregion

                    //if (pd_no_3tcp.Count() < 2) continue;


					                    //正确计算seq的包长，
                    //tcps.seq_total = (tcps.seq_nxt > tcps.seq_max ? tcps.seq_nxt : tcps.seq_max) - tcps.seq_min;
                    //不能用seq_max
                    //tcps.seq_total = tcps.seq_nxt - tcps.seq_min;//这个计算有错误



					                    //tcps.seq_nxt = pd_no_3tcp.Max(e => Convert.ToInt64(e.tcp_nxtseq));


										               //p.ip_aggre,
                            //p.ip2_aggre,
                            //p.llc_aggre,
                            //p.msg_aggre,
                            //p.tcp_aggre,
                            //p.seq_total_lost,
                            //p.seq_total_aggre,
                            //p.seq_total_reduce,
                            //p.down_rate,
                            //p.duration,
                            //p.headersize,
                            //p.imsi,
                            //p.ip_rate,
                            //p.ip_total,
                            //p.ip2_min_len,
                            //p.ip2_rate,
                            //p.ip2_total,
                            //p.lac,
                            //p.llc_cnt,
                            //p.llc_max,
                            //p.llc_min,
                            //p.packet_count,
                            //p.packet_count_repeat,
                            //p.packet_discard_total,
                            //p.packet_sack_total,
                            //p.seq_ip2,
                            //p.seq_max,
                            //p.seq_min,
                            ////p.seq_nxt,
                            //p.seq_rate,
                            ////p.seq_total,
                            //p.seq_totals,
                            //p.session_id

							            //gridView3.OptionsView.ColumnAutoWidth = false;
            //gridView3.OptionsView.ShowViewCaption= true;




